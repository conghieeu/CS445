using System;
using UnityEngine;
using UnityEngine.InputSystem;

namespace CuaHang.InputImprove
{

    public class InputImprove
    {
        private static InputImprove _instance;
        private GameActionInput _gameActionInput;

        private InputImprove()
        {
            _gameActionInput = new GameActionInput();
            _gameActionInput.Enable();
        }

        public static InputImprove Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new InputImprove();
                }
                return _instance;
            }
        }

        public static void ResetInstance()
        {
            _instance = null;
        }

        public event Action<InputAction.CallbackContext> SnapPerformed
        {
            add
            {
                _gameActionInput.UI.Snap.performed += value;
            }
            remove
            {
                _gameActionInput.UI.Snap.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> MenuSettings
        {
            add
            {
                _gameActionInput.UI.MenuSettings.performed += value;
            }
            remove
            {
                _gameActionInput.UI.MenuSettings.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> DragItem
        {
            add
            {
                _gameActionInput.UI.Drag.performed += value;
            }
            remove
            {
                _gameActionInput.UI.Drag.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> ShowInfo
        {
            add
            {
                _gameActionInput.UI.ShowInfo.performed += value;
            }
            remove
            {
                _gameActionInput.UI.ShowInfo.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> Cancel
        {
            add
            {
                _gameActionInput.UI.Cancel.performed += value;
            }
            remove
            {
                _gameActionInput.UI.Cancel.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> Click
        {
            add
            {
                _gameActionInput.UI.LeftClick.started += value;
            }
            remove
            {
                _gameActionInput.UI.LeftClick.started -= value;
            }
        }

        public event Action<InputAction.CallbackContext> SenderItem
        {
            add
            {
                _gameActionInput.UI.SenderItem.performed += value;
            }
            remove
            {
                _gameActionInput.UI.SenderItem.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> EditItem
        {
            add
            {
                _gameActionInput.UI.EditItem.performed += value;
            }
            remove
            {
                _gameActionInput.UI.EditItem.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> FollowItem
        {
            add
            {
                _gameActionInput.UI.FollowItem.performed += value;
            }
            remove
            {
                _gameActionInput.UI.FollowItem.performed -= value;
            }
        }

        public event Action<InputAction.CallbackContext> SecondTouchContactStart
        {
            add
            {
                _gameActionInput.UI.SecondTouchContact.started += value;
            }
            remove
            {
                _gameActionInput.UI.SecondTouchContact.started -= value;
            }
        }

        public event Action<InputAction.CallbackContext> SecondTouchContactCancel
        {
            add
            {
                _gameActionInput.UI.SecondTouchContact.canceled += value;
            }
            remove
            {
                _gameActionInput.UI.SecondTouchContact.canceled -= value;
            }
        }

        public event Action<InputAction.CallbackContext> OnMovement
        {
            add
            {
                _gameActionInput.Player.Move.performed += value;
            }
            remove
            {
                _gameActionInput.Player.Move.performed -= value;
            }
        }

        public Vector2 PrimaryFingerPosition()
        {
            return _gameActionInput.UI.PrimaryFingerPosition.ReadValue<Vector2>();
        }

        public Vector2 SecondFingerPosition()
        {
            return _gameActionInput.UI.SecondFingerPosition.ReadValue<Vector2>();
        }

        public Vector2 MovementInput()
        {
            return _gameActionInput.Player.Move.ReadValue<Vector2>();
        }

        public Vector2 MousePosition()
        {
            return _gameActionInput.UI.Point.ReadValue<Vector2>();
        }

        public float MouseAxisX()
        {
            return _gameActionInput.UI.MouseX.ReadValue<float>();
        }

        public float MouseScroll()
        {
            return _gameActionInput.UI.MouseScroll.ReadValue<float>();
        }

        public bool MouseRightClick()
        {
            return _gameActionInput.UI.RightClick.IsPressed();
        }

        public bool MouseLeftClick()
        {
            return _gameActionInput.UI.LeftClick.IsPressed();
        }

        public bool DoubleTouchScreen()
        {
            // Kiểm tra nếu có ít nhất hai điểm chạm
            if (Touchscreen.current != null && Touchscreen.current.touches.Count >= 2)
            {
                var touch1 = Touchscreen.current.touches[0];
                var touch2 = Touchscreen.current.touches[1];

                // Kiểm tra nếu cả hai điểm chạm đều đang trong quá trình chạm
                if (touch1.isInProgress && touch2.isInProgress)
                {
                    return true;
                }
            }
            return false;
        }

    }


}